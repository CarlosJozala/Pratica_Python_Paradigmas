{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMFCSKQBOPV4EsH+/JQcMpl",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/CarlosJozala/Praticas-em-Python/blob/main/9_Fa%C3%A7avcmesmo.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Criação de Questões**"
      ],
      "metadata": {
        "id": "J7dxe99IBX3k"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Ik1j09r1AEPo"
      },
      "outputs": [],
      "source": [
        "#Questão 1 \n",
        "# Contadores para números negativos, positivos e zero\n",
        "negativos = 0\n",
        "positivos = 0\n",
        "zero = 0\n",
        "\n",
        "# Loop para ler os valores de A\n",
        "for i in range(255):\n",
        "    valor = float(input(\"Insira um valor para A: \"))\n",
        "    if valor < 0:\n",
        "        negativos += 1\n",
        "    elif valor > 0:\n",
        "        positivos += 1\n",
        "    else:\n",
        "        zero += 1\n",
        "\n",
        "# Exibe o número de valores negativos, positivos e zero\n",
        "print(\"Número de valores negativos:\", negativos)\n",
        "print(\"Número de valores positivos:\", positivos)\n",
        "print(\"Número de valores zero:\", zero)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Questão 2 - Sistema de Votos\n",
        "\n",
        "candidato1 = 0\n",
        "candidato2 = 0\n",
        "candidato3 = 0\n",
        "candidato4 = 0\n",
        "voto_nulo = 0\n",
        "voto_branco = 0\n",
        "\n",
        "while True:\n",
        "    voto = int(input(\"Informe o código do voto: \"))\n",
        "    if voto == 1:\n",
        "        candidato1 += 1\n",
        "    elif voto == 2:\n",
        "        candidato2 += 1\n",
        "    elif voto == 3:\n",
        "        candidato3 += 1\n",
        "    elif voto == 4:\n",
        "        candidato4 += 1\n",
        "    elif voto == 5:\n",
        "        voto_nulo += 1\n",
        "    elif voto == 6:\n",
        "        voto_branco += 1\n",
        "    else:\n",
        "        break\n",
        "\n",
        "print(\"Candidato 1:\", candidato1, \"votos\")\n",
        "print(\"Candidato 2:\", candidato2, \"votos\")\n",
        "print(\"Candidato 3:\", candidato3, \"votos\")\n",
        "print(\"Candidato 4:\", candidato4, \"votos\")\n",
        "print(\"Votos nulos:\", voto_nulo)\n",
        "print(\"Votos em branco:\", voto_branco)"
      ],
      "metadata": {
        "id": "VFmR4T8dBcFX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Questão 3 - Brincando com Matriz e Algebra Linear\n",
        "matriz = [[1,2,3,4,5,6],\n",
        "          [7,8,9,10,11,12],\n",
        "          [13,14,15,16,17,18],\n",
        "          [19,20,21,22,23,24],\n",
        "          [25,26,27,28,29,30],\n",
        "          [31,32,33,34,35,36]]\n",
        "contagem = 0\n",
        "for i in range(6):\n",
        "    for j in range(6):\n",
        "        if matriz[i][j] > 10:\n",
        "            contagem += 1\n",
        "print(\"A matriz possui\", contagem, \"valores maiores que 10.\")"
      ],
      "metadata": {
        "id": "H2RqksnYBcKr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Questão 4 - Posições em Vetores\n",
        "// Declarando o vetor de 16 posições\n",
        "int vetor[16];\n",
        "\n",
        "// Lendo os valores do vetor\n",
        "for (int i = 0; i < 16; i++) {\n",
        "    printf(\"Informe o valor da posição %d: \", i);\n",
        "    scanf(\"%d\", &vetor[i]);\n",
        "}\n",
        "\n",
        "// Trocando os valores dos 8 primeiros pelos 8 últimos\n",
        "for (int i = 0; i < 8; i++) {\n",
        "    int temp = vetor[i];\n",
        "    vetor[i] = vetor[15 - i];\n",
        "    vetor[15 - i] = temp;\n",
        "}\n",
        "\n",
        "// Escrevendo o vetor obtido\n",
        "printf(\"Vetor obtido: \");\n",
        "for (int i = 0; i < 16; i++) {\n",
        "    printf(\"%d \", vetor[i]);\n",
        "}"
      ],
      "metadata": {
        "id": "xg28vdOVBcP7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Exercício 5\n",
        "# Uma lâmpada tem a duração de acordo com a densidade de probabilidade a seguir: f(t) = 1/1000.e-t/1000; para t ≥ 0 e 0 para t < 0. Determine\n",
        "# a) A probabilidade de que uma lâmpada qualquer queime antes de 1000 horas:\n",
        "print(\"P(t<1000)=\",expon.cdf(1000,scale=1000))"
      ],
      "metadata": {
        "id": "l3RGAigiBcWI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# b) A probabilidade de que uma lâmpada queime depois de sua duração média:\n",
        "print(\"P(t>1000)=\",1-expon.cdf(1000,scale=1000))"
      ],
      "metadata": {
        "id": "l6eNdasXBcbZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "ApXuTdnSBchG"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
